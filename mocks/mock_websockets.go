// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/beyondallrepair/gobinance (interfaces: NextReaderCloser,DialContexter)

// Package mock_gobinance is a generated GoMock package.
package mock_gobinance

import (
	context "context"
	gobinance "github.com/beyondallrepair/gobinance"
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockNextReaderCloser is a mock of NextReaderCloser interface
type MockNextReaderCloser struct {
	ctrl     *gomock.Controller
	recorder *MockNextReaderCloserMockRecorder
}

// MockNextReaderCloserMockRecorder is the mock recorder for MockNextReaderCloser
type MockNextReaderCloserMockRecorder struct {
	mock *MockNextReaderCloser
}

// NewMockNextReaderCloser creates a new mock instance
func NewMockNextReaderCloser(ctrl *gomock.Controller) *MockNextReaderCloser {
	mock := &MockNextReaderCloser{ctrl: ctrl}
	mock.recorder = &MockNextReaderCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNextReaderCloser) EXPECT() *MockNextReaderCloserMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockNextReaderCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockNextReaderCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNextReaderCloser)(nil).Close))
}

// NextReader mocks base method
func (m *MockNextReaderCloser) NextReader() (int, io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextReader")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(io.Reader)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NextReader indicates an expected call of NextReader
func (mr *MockNextReaderCloserMockRecorder) NextReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextReader", reflect.TypeOf((*MockNextReaderCloser)(nil).NextReader))
}

// MockDialContexter is a mock of DialContexter interface
type MockDialContexter struct {
	ctrl     *gomock.Controller
	recorder *MockDialContexterMockRecorder
}

// MockDialContexterMockRecorder is the mock recorder for MockDialContexter
type MockDialContexterMockRecorder struct {
	mock *MockDialContexter
}

// NewMockDialContexter creates a new mock instance
func NewMockDialContexter(ctrl *gomock.Controller) *MockDialContexter {
	mock := &MockDialContexter{ctrl: ctrl}
	mock.recorder = &MockDialContexterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDialContexter) EXPECT() *MockDialContexterMockRecorder {
	return m.recorder
}

// DialContext mocks base method
func (m *MockDialContexter) DialContext(arg0 context.Context, arg1 string, arg2 http.Header) (gobinance.NextReaderCloser, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(gobinance.NextReaderCloser)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DialContext indicates an expected call of DialContext
func (mr *MockDialContexterMockRecorder) DialContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialContext", reflect.TypeOf((*MockDialContexter)(nil).DialContext), arg0, arg1, arg2)
}
